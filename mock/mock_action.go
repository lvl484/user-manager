// Code generated by MockGen. DO NOT EDIT.
// Source: actionintf.go

// Package mocks is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/lvl484/user-manager/config"
	model "github.com/lvl484/user-manager/model"
	storage "github.com/lvl484/user-manager/storage"
)

// MockActionChecker is a mock of ActionChecker interface
type MockActionChecker struct {
	ctrl     *gomock.Controller
	recorder *MockActionCheckerMockRecorder
}

// MockActionCheckerMockRecorder is the mock recorder for MockActionChecker
type MockActionCheckerMockRecorder struct {
	mock *MockActionChecker
}

// NewMockActionChecker creates a new mock instance
func NewMockActionChecker(ctrl *gomock.Controller) *MockActionChecker {
	mock := &MockActionChecker{ctrl: ctrl}
	mock.recorder = &MockActionCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActionChecker) EXPECT() *MockActionCheckerMockRecorder {
	return m.recorder
}

// NewConfig mocks base method
func (m *MockActionChecker) Config() (*config.Config, error) {
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewConfig indicates an expected call of NewConfig
func (mr *MockActionCheckerMockRecorder) Config() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockActionChecker)(nil).Config))
}

// DBConfig mocks base method
func (m *MockActionChecker) DBConfig(arg0 context.Context) (*storage.DBConfig, error) {
	ret := m.ctrl.Call(m, "DBConfig", arg0)
	ret0, _ := ret[0].(*storage.DBConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DBConfig indicates an expected call of DBConfig
func (mr *MockActionCheckerMockRecorder) DBConfig(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBConfig", reflect.TypeOf((*MockActionChecker)(nil).DBConfig), arg0)
}

// ConnectToDB mocks base method
func (m *MockActionChecker) ConnectToDB(arg0 *storage.DBConfig) (*sql.DB, error) {
	ret := m.ctrl.Call(m, "ConnectToDB", arg0)
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectToDB indicates an expected call of ConnectToDB
func (mr *MockActionCheckerMockRecorder) ConnectToDB(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectToDB", reflect.TypeOf((*MockActionChecker)(nil).ConnectToDB), arg0)
}

// returnRepo mocks base method
func (m *MockActionChecker) UsersRepo() (*model.UsersRepo, error) {
	ret := m.ctrl.Call(m, "UsersRepo")
	ret0, _ := ret[0].(*model.UsersRepo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// returnRepo indicates an expected call of returnRepo
func (mr *MockActionCheckerMockRecorder) UsersRepo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersRepo", reflect.TypeOf((*MockActionChecker)(nil).UsersRepo))
}

// messageCommandDone mocks base method
func (m *MockActionChecker) MessageCommandDone(msg string) error {
	ret := m.ctrl.Call(m, "MessageCommandDone", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// messageCommandDone indicates an expected call of messageCommandDone
func (mr *MockActionCheckerMockRecorder) MessageCommandDone(msg interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageCommandDone", reflect.TypeOf((*MockActionChecker)(nil).MessageCommandDone), msg)
}
